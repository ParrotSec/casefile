#!/bin/sh

#
# resolve symlinks
#

PRG=$0

while [ -h "$PRG" ]; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '^.*-> \(.*\)$' 2>/dev/null`
    if expr "$link" : '^/' 2> /dev/null >/dev/null; then
    PRG="$link"
    else
    PRG="`dirname "$PRG"`/$link"
    fi
done

progdir=`dirname "$PRG"`
APPNAME=`basename "$PRG"`

# Show message if executed from DMG
name=`uname`
#echo OS: "$name" > ~/out.txt
#echo progdir: "$progdir" >> ~/out.txt
if [ "$name" = "Darwin" ]; then
    testdmg=`echo "$progdir" | sed "s#^/Volumes/Maltego[^/]\\{1,\\}/Maltego.\\{0,\\}\\$#ISDMG#g"`
    #echo path: "$testdmg" >> ~/out.txt
    if [ "$testdmg" = "ISDMG" ]; then
        osascript -e 'tell app "Finder" to display dialog "Please drag Maltego to Applications and run it from there."' 
        exit 1
    fi
fi

if [ -f "$progdir/../etc/$APPNAME".conf ] ; then
    . "$progdir/../etc/$APPNAME".conf
fi

# XXX does not correctly deal with spaces in non-userdir params
args=""

case "`uname`" in
    Darwin*)
        userdir="${default_mac_userdir}"
        ;;
    *)
        userdir="${default_userdir}"
        ;;
esac
while [ $# -gt 0 ] ; do
    case "$1" in
        --userdir) shift; if [ $# -gt 0 ] ; then userdir="$1"; fi
            ;;
        *) args="$args \"$1\""
            ;;
    esac
    shift
done

if [ -f "${userdir}/etc/$APPNAME".conf ] ; then
    . "${userdir}/etc/$APPNAME".conf
    if [ -n "$jdkhome" -a \! -d "$jdkhome" -a -d "$progdir/../$jdkhome" ]; then
        # #74333: permit jdkhome to be defined as relative to app dir
        jdkhome="$progdir/../$jdkhome"
    fi
    if [ -n "$jdkhome" -a \! -d "$jdkhome" ]; then # not empty and not directory
        rm -f "${userdir}/etc/$APPNAME".conf # etc conf is wrong so remove it
    else
        jdk_version=$("${jdkhome}/bin/java" -version 2>&1 | "/usr/bin/awk" -F '"' '/version/ {print substr($2, 1, 3)}')
        if [ "$jdk_version" \!= "1.7" -a "$jdk_version" \!= "1.8" -a "$jdk_version" \!= "1.9" -a "$jdk_version" \!= "1.10" -a "$jdk_version" \!= "2.0" ] ; then   
            rm -f "${userdir}/etc/$APPNAME".conf
        fi
    fi
fi

if [ \! -f "${userdir}/etc/$APPNAME".conf ]; then # if etc conf does not exist or was removed
    if type java; then
        echo "found java executable in PATH"
        _java=java
    elif [ -n "$JAVA_HOME" ] && [ -x "$JAVA_HOME/bin/java" ];  then
        echo "found java executable in JAVA_HOME"
        _java="$JAVA_HOME/bin/java"
    else
        JAVA_HOME=`/usr/libexec/java_home`
        if [ -n "$JAVA_HOME" ] && [ -x "$JAVA_HOME/bin/java" ];  then
            echo "found java executable using /usr/libexec/java_home"
            _java="$JAVA_HOME/bin/java"
        else
            echo "no java"
        fi
    fi
    if [ "$_java" ]; then
        $_java -jar "$progdir/../maltego-ui/modules/ext/Java_Config_App.jar" -nogui
        if [ -f "${userdir}/etc/$APPNAME".conf ] ; then
            . "${userdir}/etc/$APPNAME".conf
        fi
    fi
fi

if [ -n "$jdkhome" -a \! -d "$jdkhome" -a -d "$progdir/../$jdkhome" ]; then
    # #74333: permit jdkhome to be defined as relative to app dir
    jdkhome="$progdir/../$jdkhome"
fi

readClusters() {
  if [ -x /usr/ucb/echo ]; then
    echo=/usr/ucb/echo
  else
    echo=echo
  fi
  while read X; do
    if [ "$X" \!= "" ]; then
      $echo "$progdir/../$X"
    fi
  done
}

absolutize_paths() {
    while read path; do
        if [ -d "$path" ]; then
            (cd "$path" 2>/dev/null && pwd)
        else
            echo "$path"
        fi
    done
}

clusters=`(cat "$progdir/../etc/$APPNAME".clusters; echo) | readClusters | absolutize_paths | tr '\012' ':'`

if [ ! -z "$extra_clusters" ] ; then
    clusters="$clusters:$extra_clusters"
fi

nbexec=`echo "$progdir"/../platform*/lib/nbexec`

case "`uname`" in
    Darwin*)
        eval exec sh '"$nbexec"' \
            --jdkhome '"$jdkhome"' \
            -J-Dcom.apple.mrj.application.apple.menu.about.name='"$APPNAME"' \
            -J-Xdock:name='"$APPNAME"' \
            '"-J-Xdock:icon=$progdir/../../$APPNAME.icns"' \
            --clusters '"$clusters"' \
            --userdir '"${userdir}"' \
            ${default_options} \
            "$args"
        ;;
    *)  
       sh=sh
       # #73162: Ubuntu uses the ancient Bourne shell, which does not implement trap well.
       if [ -x /bin/bash ]
       then
           sh=/bin/bash
       fi
       eval exec $sh '"$nbexec"' \
            --jdkhome '"$jdkhome"' \
            --clusters '"$clusters"' \
            --userdir '"${userdir}"' \
            ${default_options} \
            "$args"
       exit 1
        ;;
esac
